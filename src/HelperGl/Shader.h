#ifndef _HelperGl_Shader_H
#define _HelperGl_Shader_H

#include <GL/glew.h>
#include <Math/Vectorf.h>
#include <sstream>
#include <iostream>
#include <fstream>
#include <cassert>
#include <map>

namespace HelperGl
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// \class	Shader
	///
	/// \brief	Shader class containing a shader (vertex or fragment) source code that can be compiled.
	/// 		This class also offers facilities for shader loading / writing.
	///
	/// \author	F. Lamarche, Université de Rennes 1
	/// \date	09/12/2015
	////////////////////////////////////////////////////////////////////////////////////////////////////
	class Shader
	{
	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \typedef	enum
		///
		/// \brief	Enumeration providing the type of the shader (fragment of vertex shader).
		////////////////////////////////////////////////////////////////////////////////////////////////////
		typedef enum {vertex = GL_VERTEX_SHADER, fragment = GL_FRAGMENT_SHADER} ShaderType ;

	protected:
		/// \brief	The source of the shader.
		::std::stringstream m_shader ;
		/// \brief	Type of the shader.
		ShaderType m_shaderType ;
		/// \brief	Identifier for the shader.
		GLuint m_shaderId ;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	size_t Shader::streamSize()
		///
		/// \brief	Gets the stream size (number of characters in the source code of the shader).
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \return	.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		size_t streamSize();

	public:

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	Shader::Shader(ShaderType type)
		///
		/// \brief	Constructor.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \param	type	The type of the shader (fragment of vertex).
		////////////////////////////////////////////////////////////////////////////////////////////////////
		Shader(ShaderType type);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	ShaderType Shader::getType() const
		///
		/// \brief	Gets the type.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \return	The type.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		ShaderType getType() const
		{
			return m_shaderType ;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	::std::ostream & Shader::getStream()
		///
		/// \brief	Returns the stream containing the source of the shader.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		////////////////////////////////////////////////////////////////////////////////////////////////////
		::std::ostream & getStream()
		{
			return m_shader ;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	GLuint Shader::getId() const
		///
		/// \brief	Gets the identifier.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \return	The identifier.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		GLuint getId() const
		{
			return m_shaderId ;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	bool Shader::loadFromFile(const ::std::string & filename)
		///
		/// \brief	Loads the shader source from the provided file.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \param	filename	Filename of the file.
		///
		/// \return	true if it succeeds, false if it fails.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool loadFromFile(const ::std::string & filename);

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	bool Shader::compile()
		///
		/// \brief	Compiles this shader.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \return	true if it succeeds, false if it fails.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool compile();

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// \fn	bool Shader::isCompiled() const
		///
		/// \brief	Query if this object is compiled.
		///
		/// \author	F. Lamarche, Université de Rennes 1
		/// \date	03/02/2016
		///
		/// \return	true if compiled, false if not.
		////////////////////////////////////////////////////////////////////////////////////////////////////
		bool isCompiled() const
		{
			return m_shaderId!=0 ;
		}
	};

}

#endif